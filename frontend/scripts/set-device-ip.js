#!/usr/bin/env node
/* Detects host LAN IP and writes frontend/.env.device. */
const os = require('os');
const fs = require('fs');
const path = require('path');

const PORT = process.env.PORT || process.argv[2] || 8000;

function isPrivate(ip) {
  if (!ip) return false;
  if (ip.startsWith('10.')) return true;
  if (ip.startsWith('192.168.')) return true;
  if (ip.startsWith('172.')) {
    const parts = ip.split('.');
    const second = parseInt(parts[1], 10);
    if (second >= 16 && second <= 31) return true;
  }
  return false;
}

function pickLANIP() {
  const ifaces = os.networkInterfaces();
  const candidates = [];
  for (const name of Object.keys(ifaces)) {
    for (const info of ifaces[name] || []) {
      if (info.family === 'IPv4' && !info.internal && isPrivate(info.address)) {
        candidates.push({ name, address: info.address });
      }
    }
  }
  // Prefer 192.168.*, then 10.*, then 172.16-31.*
  candidates.sort((a, b) => {
    const score = (ip) => ip.startsWith('192.168.') ? 3 : ip.startsWith('10.') ? 2 : 1;
    return score(b.address) - score(a.address);
  });
  return candidates[0]?.address || null;
}

const ip = pickLANIP();
if (!ip) {
  console.error('Could not detect LAN IPv4 address. Please edit frontend/.env.device manually.');
  process.exit(1);
}

const envPath = path.resolve(__dirname, '..', '.env.device');
const content = `# Auto-generated by scripts/set-device-ip.js\nEXPO_PUBLIC_API_URL=http://${ip}:${PORT}\n`;
fs.writeFileSync(envPath, content);
console.log(`Wrote ${envPath}:\n${content}`);

// Optionally copy to .env if flag provided
if (process.env.APPLY_TO_DOTENV === '1') {
  const dotEnvPath = path.resolve(__dirname, '..', '.env');
  fs.writeFileSync(dotEnvPath, content);
  console.log(`Also wrote ${dotEnvPath}`);
}

